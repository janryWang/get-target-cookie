{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,8CAAsB;AACtB,gDAAwB;AAEjB,MAAM,SAAS,GAAG,CAAC,MAAc,EAAE,QAAkC,EAAE,EAAE;IAC9E,MAAM,IAAI,GAAG,IAAI,CAAC;IAClB,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC;IAC5B,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,EAAE,oBAAoB,IAAI,EAAE,CAAC,CAAC;IAC7D,cAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAEf,MAAM,GAAG,GAAG,IAAI,aAAG,EAAE,CAAC;IAEtB,GAAG,CAAC,GAAG,CAAC,CAAO,GAAG,EAAE,IAAI,EAAE,EAAE;QAC1B,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACvD,MAAM,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACpC,GAAG,CAAC,GAAG,CAAC,kCAAkC,EAAE,MAAM,CAAC,CAAC;QACpD,GAAG,CAAC,GAAG,CAAC,6BAA6B,EAAE,GAAG,GAAG,CAAC,QAAQ,KAAK,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;QACvE,GAAG,CAAC,GAAG,CAAC,gCAAgC,EAAE,GAAG,CAAC,CAAC;QAC/C,GAAG,CAAC,GAAG,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAC;QAChD,IAAI,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;YACxB,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC;YACjB,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;YAC7C,MAAM,IAAI,EAAE,CAAC;YACb,QAAQ,CAAC,MAAM,CAAC,CAAC;YACjB,MAAM,CAAC,KAAK,EAAE,CAAC;YACf,OAAO;SACR;QACD,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,sBAAsB,CAAC,CAAC;IACzC,CAAC,CAAA,CAAC,CAAC;IAEH,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AAC7C,CAAC,CAAC;AA3BW,QAAA,SAAS,aA2BpB","sourcesContent":["import Koa from \"koa\";\nimport open from \"open\";\n\nexport const getCookie = (target: string, callback: (cookie: string) => void) => {\n  const port = 5000;\n  const url = new URL(target);\n  url.searchParams.set(\"callback\", `http://127.0.0.1:${port}`);\n  open(url.href);\n\n  const app = new Koa();\n\n  app.use(async (ctx, next) => {\n    const params = new URLSearchParams(ctx.request.search);\n    const cookie = params.get(\"cookie\");\n    ctx.set(\"access-control-allow-credentials\", \"true\");\n    ctx.set(\"Access-Control-Allow-Origin\", `${url.protocol}//${url.host}`);\n    ctx.set(\"Access-Control-Request-Headers\", \"*\");\n    ctx.set(\"Access-Control-Request-Method\", \"GET\");\n    if (params.get(\"cookie\")) {\n      ctx.status = 200;\n      ctx.body = JSON.stringify({ success: true });\n      await next();\n      callback(cookie);\n      server.close();\n      return;\n    }\n    ctx.throw(500, \"can not found cookie\");\n  });\n\n  const server = app.listen(port, \"0.0.0.0\");\n};"]}