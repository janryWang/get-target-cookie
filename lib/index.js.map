{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,8CAAqB;AACrB,gDAAuB;AAEhB,MAAM,SAAS,GAAG,CAAC,MAAc,EAAE,EAAE;IAC1C,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACrC,MAAM,IAAI,GAAG,IAAI,CAAA;QACjB,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,CAAA;QAC3B,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,EAAE,oBAAoB,IAAI,EAAE,CAAC,CAAA;QAC5D,cAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;QAEd,MAAM,GAAG,GAAG,IAAI,aAAG,EAAE,CAAA;QAErB,GAAG,CAAC,GAAG,CAAC,CAAO,GAAG,EAAE,IAAI,EAAE,EAAE;YAC1B,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;YACtD,MAAM,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;YACnC,GAAG,CAAC,GAAG,CAAC,kCAAkC,EAAE,MAAM,CAAC,CAAA;YACnD,GAAG,CAAC,GAAG,CAAC,6BAA6B,EAAE,GAAG,GAAG,CAAC,QAAQ,KAAK,GAAG,CAAC,IAAI,EAAE,CAAC,CAAA;YACtE,GAAG,CAAC,GAAG,CAAC,gCAAgC,EAAE,GAAG,CAAC,CAAA;YAC9C,GAAG,CAAC,GAAG,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAA;YAC/C,IAAI,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;gBACxB,GAAG,CAAC,MAAM,GAAG,GAAG,CAAA;gBAChB,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAA;gBAC5C,MAAM,IAAI,EAAE,CAAA;gBACZ,OAAO,CAAC,MAAM,CAAC,CAAA;gBACf,MAAM,CAAC,KAAK,EAAE,CAAA;gBACd,OAAM;aACP;YACD,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,sBAAsB,CAAC,CAAA;YACtC,MAAM,IAAI,EAAE,CAAA;YACZ,MAAM,CAAC,sBAAsB,CAAC,CAAA;YAC9B,MAAM,CAAC,KAAK,EAAE,CAAA;QAChB,CAAC,CAAA,CAAC,CAAA;QAEF,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,SAAS,CAAC,CAAA;IAC5C,CAAC,CAAC,CAAA;AACJ,CAAC,CAAA;AAhCY,QAAA,SAAS,aAgCrB","sourcesContent":["import Koa from 'koa'\nimport open from 'open'\n\nexport const getCookie = (target: string) => {\n  return new Promise((resolve, reject) => {\n    const port = 5000\n    const url = new URL(target)\n    url.searchParams.set('callback', `http://127.0.0.1:${port}`)\n    open(url.href)\n\n    const app = new Koa()\n\n    app.use(async (ctx, next) => {\n      const params = new URLSearchParams(ctx.request.search)\n      const cookie = params.get('cookie')\n      ctx.set('access-control-allow-credentials', 'true')\n      ctx.set('Access-Control-Allow-Origin', `${url.protocol}//${url.host}`)\n      ctx.set('Access-Control-Request-Headers', '*')\n      ctx.set('Access-Control-Request-Method', 'GET')\n      if (params.get('cookie')) {\n        ctx.status = 200\n        ctx.body = JSON.stringify({ success: true })\n        await next()\n        resolve(cookie)\n        server.close()\n        return\n      }\n      ctx.throw(500, 'can not found cookie')\n      await next()\n      reject('can not found cookie')\n      server.close()\n    })\n\n    const server = app.listen(port, '0.0.0.0')\n  })\n}\n"]}